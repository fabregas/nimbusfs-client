#!/usr/bin/python
"""
Copyright (C) 2012 Konstantin Andrusenko
    See the documentation for further information on copyrights,
    or contact the author. All Rights Reserved.

@author Konstantin Andrusenko
@date December 4, 2012
"""

import os
import sys
import time
import httplib
import getpass
import socket
import tempfile
import subprocess
from datetime import datetime

client_dir = os.path.abspath(os.path.join(os.path.dirname(__file__), '../'))
daemon_script = os.path.join(client_dir, 'id_client/client_daemon.py')
sys.path.append(client_dir)

from id_client.client_daemon import DAEMON_PORT, STATUS_PATH, \
                        SYNC_STAT_PATH, START_PATH, STOP_PATH

PID_FILE_NAME = 'idepositbox_client_daemon.pid'

def check_daemon():
    try:
        conn = httplib.HTTPConnection("127.0.0.1", DAEMON_PORT)
        conn.request('GET', STATUS_PATH)
        response = conn.getresponse()
        conn.close()
    except socket.error, err:
        return False
    return True

def get_pid_file():
    return os.path.join(tempfile.gettempdir(), PID_FILE_NAME)

def start_daemon():
    if check_daemon():
        sys.stderr.write('Idepositbox client daemon is already started\n')
        sys.exit(1)

    t0 = datetime.now()
    cmd = 'nohup python %s &' % daemon_script
    devnull = open('/dev/null', 'r+')
    sp = subprocess.Popen(cmd.split(), stdout=devnull, stderr=devnull)
    open(get_pid_file(), 'w').write(str(sp.pid))

    ks_passwd = getpass.getpass('Key storage password: ')

    dt = datetime.now() - t0
    sleep_time = 2 - dt.seconds
    if sleep_time > 0:
        time.sleep(sleep_time)

    if not check_daemon():
        sys.stderr.write('Idepositbox client daemon does not started!\n')
        sys.exit(1)

    conn = httplib.HTTPConnection("127.0.0.1", DAEMON_PORT)
    conn.request('POST', START_PATH, ks_passwd)
    response = conn.getresponse()
    if response.status == 200:
        sys.stdout.write('Idepositbox client is started!\n')
    else:
        sys.stderr.write('ERROR! %s\n'%response.reason)
    conn.close()


def stop_deamon():
    if not check_daemon():
        sys.stderr.write('Idepositbox client daemon does not started\n')
        sys.exit(1)

    conn = httplib.HTTPConnection("127.0.0.1", DAEMON_PORT)
    conn.request('POST', STOP_PATH)
    response = conn.getresponse()
    conn.close()
    if response.status != 200:
        sys.stdout.write('Idepositbox client does not stopped!\n')
        sys.exit(1)

    pid_file = get_pid_file()
    if not os.path.exists(pid_file):
        sys.stderr.write('No pid file %s found. Please, kill client_daemon process manually\n'%pid_file)
        sys.exit(1)

    pid = open(pid_file, 'r').read()
    os.system('kill -s INT %s'%pid)
    os.unlink(pid_file)
    sys.stdout.write('Idepositbox client daemon is stopped now\n')


def status_daemon():
    if not check_daemon():
        sys.stderr.write('Idepositbox client daemon does not started\n')
        sys.exit(1)

    conn = httplib.HTTPConnection("127.0.0.1", DAEMON_PORT)
    conn.request('GET', STATUS_PATH)
    response = conn.getresponse()
    conn.close()
    if response.status != 200:
        sys.stderr.write('ERROR! %s %s\n'%(response.status, response.reason))
    else:
        sys.stdout.write('client status: %s\n'%response.read())

def sync_stat_daemon():
    if not check_daemon():
        sys.stderr.write('Idepositbox client daemon does not started\n')
        sys.exit(1)

    conn = httplib.HTTPConnection("127.0.0.1", DAEMON_PORT)
    conn.request('GET', SYNC_STAT_PATH)
    response = conn.getresponse()
    if response.status != 200:
        sys.stderr.write('ERROR! %s %s\n'%(response.status, response.reason))
    else:
        stat = response.read().strip()
        if not stat:
            stat = 'all data is synchronized with Cloud'
        else:
            stat = '\n%s'%stat
        sys.stdout.write('sync status: %s\n'%stat)
    conn.close()

if __name__ == '__main__':
    if len(sys.argv) != 2:
        print 'usage: %s start|stop|status|sync-stat'%sys.argv[0]
        sys.exit(1)

    command = sys.argv[1]
    if command == 'start':
        start_daemon()
    elif command == 'stop':
        stop_deamon()
    elif command == 'status':
        status_daemon()
    elif command == 'sync-stat':
        sync_stat_daemon()
    else:
        sys.stdout.write('ERROR! Unknown command "%s"\n'%command)


